{
  "name": "postcss-simple-vars",
  "version": "0.2.4",
  "description": "PostCSS plugin for Sass-like variables",
  "keywords": [
    "postcss",
    "sass",
    "css",
    "variables",
    "vars"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-simple-vars.git"
  },
  "devDependencies": {
    "jshint-stylish": "1.0.0",
    "gulp-jshint": "1.9.2",
    "gulp-mocha": "2.0.0",
    "postcss": "4.0.6",
    "mocha": "2.1.0",
    "chai": "2.1.0",
    "gulp": "3.8.11"
  },
  "scripts": {
    "test": "gulp"
  },
  "readme": "# PostCSS Simple Variables [![Build Status](https://travis-ci.org/postcss/postcss-simple-vars.svg)](https://travis-ci.org/postcss/postcss-simple-vars)\n\n<img align=\"right\" width=\"95\" height=\"95\" src=\"http://postcss.github.io/postcss/logo.svg\" title=\"Philosopher’s stone, logo of PostCSS\">\n\n[PostCSS] plugin for Sass-like variables.\n\nYou can use variables inside values, selectors and at-rule’s parameters.\n\nIf you want be closer to W3C spec, you should use [postcss-custom-properties] plugin.\n\n```css\n$blue: #056ef0\n$column: 200px\n\n.menu {\n    width: calc(4 * $column);\n}\n.menu_link {\n    background: $blue;\n    width: $column;\n}\n```\n\n```css\n.menu {\n    width: calc(4 * 200px);\n}\n.menu_link {\n    background: #056ef0;\n    width: 200px;\n}\n```\n\n[PostCSS]: https://github.com/postcss/postcss\n[postcss-custom-properties]: https://github.com/postcss/postcss-custom-properties\n\n## Interpolation\n\nThere is special syntax if you want to use variable inside CSS words:\n\n```css\n$prefix: my-company-widget\n\n$prefix { }\n$(prefix)_button { }\n```\n\n## Usage\n\nWithout options:\n\n```js\npostcss([ require('postcss-simple-vars') ])\n```\n\nWith options:\n\n```js\npostcss([\n    require('postcss-simple-vars')({ variables: require('./constants') })\n])\n```\n\nSee [PostCSS] docs for examples for your environment.\n\n## Options\n\nCall plugin function to set options:\n\n```js\n.pipe(postcss([ require('postcss-simple-vars')({ silent: true }) ]))\n```\n\n### `variables`\n\nSet default variables. It is useful to store colors or other constants\nin common file:\n\n```js\n// config/colors.js\n\nmodule.exports = {\n    blue: '#056ef0'\n}\n\n// gulpfile.js\n\nvar colors = require('./config/colors');\nvar vars   = require('postcss-simple-vars')\n\ngulp.task('css', function () {\n     return gulp.src('./src/*.css')\n        .pipe(postcss([ vars({ variables: colors }) ]))\n        .pipe(gulp.dest('./dest'));\n});\n```\n\n### `silent`\n\nLeft unknown variables in CSS and do not throw a error. Default is `false`.\n\n### `only`\n\nSet value only for variables from this object.\nOther variables will not be changed. It is useful for PostCSS plugin developers.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/postcss-simple-vars/issues"
  },
  "homepage": "https://github.com/postcss/postcss-simple-vars#readme",
  "_id": "postcss-simple-vars@0.2.4",
  "_shasum": "1f8eec2f3eb0c122efc09b52049272069d8c4d2b",
  "_resolved": "http://edevtools3gl.bank.swissquote.ch:8081/nexus/content/groups/npm/postcss-simple-vars/-/postcss-simple-vars-0.2.4.tgz",
  "_from": "postcss-simple-vars@>=0.2.4 <0.3.0"
}
